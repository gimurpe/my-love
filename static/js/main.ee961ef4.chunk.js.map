{"version":3,"sources":["assets/gifs/ballon-couple.gif","assets/gifs/stamp.webp","assets/images/heart-stamp.png","screens/Love/butterfly.webm","components/atoms/Envelope/Envelope.atom.tsx","components/atoms/Button/Button.atom.tsx","components/atoms/Confetti/Confetti.atom.tsx","screens/Love/index.tsx","state/love/index.ts","state/reducers.ts","state/store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Envelope","React","forwardRef","props","ref","message","stamps","className","data-focused","children","Button","onPress","heartCheckbox","useRef","id","type","onClick","htmlFor","Confetti","throwConfetti","confettiSettings","target","confetti","useEffect","current","ConfettiGenerator","render","clear","Love","state","envelopeRef","createRef","scene","parallaxInstance","componentDidMount","document","getElementById","Parallax","getStampsList","src","gifs","NORI_STAMP","images","HEART_STAMP","onHeartButtonClick","isFocused","getAttribute","setAttribute","setState","muted","autoPlay","playsInline","loop","video","BALLOON_COUPLE","Component","initialState","loveReducer","combineReducers","middlewares","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","enhancer","applyMiddleware","createStore","rootReducer","configureStore","App","path","component","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ee961ef4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ballon-couple.92f3b88e.gif\";","module.exports = __webpack_public_path__ + \"static/media/stamp.4b33a72b.webp\";","module.exports = __webpack_public_path__ + \"static/media/heart-stamp.b4525ec3.png\";","module.exports = __webpack_public_path__ + \"static/media/butterfly.c2f8bdeb.webm\";","// ========================================================================================\n/*                                                                                      *\n * ATOM: ENVELOPE                                                                 *\n *                                                                                      */\n// ========================================================================================\n// * Lib\nimport React, { ReactNode } from 'react'\n\n// * Utils\nimport { gifs, images } from '@constants'\n\n// * Styles\nimport './styles.scss'\n\n// * Display/UI\ntype Props = {\n   message: string\n   children: ReactNode\n   stamps: Array<ReactNode>\n}\n\nconst Envelope = React.forwardRef(\n   (props: Props, ref?: React.Ref<HTMLDivElement>) => {\n      const { message, stamps } = props\n\n      return (\n         <div className=\"flip-envelope\">\n            <div className=\"flip-envelope__design design\">\n               <div\n                  ref={ref}\n                  className=\"flip-envelope__envelope envelope\"\n                  data-focused=\"false\"\n               >\n                  <div className=\"flip-envelope__cover cover\">\n                     <div className=\"flip-envelope__cover-bottom bottom\"> </div>\n                     <div className=\"flip-envelope__cover-left left\"></div>\n                     <div className=\"flip-envelope__cover-right right\"> </div>\n                     <div className=\"flip-envelope__cover-top top\"></div>\n                  </div>\n                  <div className=\"flip-envelope__paper\">\n                     <div className=\"flip-envelope__message\">{message}</div>\n                     {props.children}\n                  </div>\n               </div>\n               <div className=\"flip-envelope__envelope-back envelope-back\">\n                  {stamps}\n               </div>\n            </div>\n         </div>\n      )\n   },\n)\n\nexport default Envelope\n","// ========================================================================================\n/*                                                                                      *\n * ATOM: ENVELOPE                                                                 *\n *                                                                                      */\n// ========================================================================================\n// * Lib\nimport React, { useRef, useLayoutEffect } from 'react'\n\n// * Utils\nimport { gifs, images } from '@constants'\n\n// * Styles\nimport './styles.scss'\n\n// * Display/UI\ntype Props = {\n   onPress?(): void\n}\nconst Button = (props: Props) => {\n   const { onPress } = props\n   const heartCheckbox = useRef<HTMLInputElement>(null)\n\n   return (\n      <div className=\"heart-button\">\n         <input\n            ref={heartCheckbox}\n            id=\"click\"\n            className=\"heart-button__checkbox\"\n            type=\"checkbox\"\n            onClick={onPress}\n         />\n         <label className=\"heart-button__label label\" htmlFor=\"click\">\n            <div className=\"heart-button__favourite favourite\">\n               <div className=\"heart-button__favourite-heart favourite_heart\">\n                  <div className=\"heart-button__favourite-heart-left favourite_heart__left\"></div>\n                  <div className=\"heart-button__favourite-heart-right favourite_heart__right\"></div>\n               </div>\n               <div className=\"heart-button__favourite-text favourite_text\">\n                  <span className=\"heart-button__text-span\">\n                     Feliz Cumplea√±os\n                  </span>\n               </div>\n            </div>\n         </label>\n      </div>\n   )\n}\n\nexport default Button\n","// ========================================================================================\n/*                                                                                      *\n * ATOM: ENVELOPE                                                                 *\n *                                                                                      */\n// ========================================================================================\n// * Lib\nimport React, { useEffect, useRef } from 'react'\nimport ConfettiGenerator from 'confetti-js'\n\n// * Utils\n\n// * Styles\nimport './styles.scss'\n\n// * Display/UI\ntype Props = {\n   throwConfetti?: boolean\n}\nconst Confetti = (props: Props) => {\n   const { throwConfetti = false } = props\n   const confettiSettings = { target: 'my-canvas' }\n   const confetti = useRef(null)\n   useEffect(() => {\n      confetti.current = new ConfettiGenerator(confettiSettings)\n   }, [])\n\n   useEffect(() => {\n      if (throwConfetti) {\n         confetti.current.render()\n      }\n      return () => confetti.current.clear()\n   }, [throwConfetti])\n\n   return <canvas ref={confetti} className=\"confetti\" id=\"my-canvas\"></canvas>\n}\n\nexport default Confetti\n","// ========================================================================================\n/*                                                                                      *\n * SCREEN: LOVE                                                                 *\n *                                                                                      */\n// ========================================================================================\n// * Lib\nimport React, { Component, createRef, useEffect } from 'react'\nimport Parallax from 'parallax-js'\n\n// * Utils\nimport { gifs, images } from '@constants'\n// * Styles\nimport './styles.scss'\n\n// * Display/UI\nimport { Envelope, Button, Confetti } from '@atoms'\nimport video from './butterfly.webm'\n\ninterface IState {\n   throwConfetti: boolean\n}\n\nclass Love extends Component<{}, IState> {\n   public state: Readonly<IState> = {\n      throwConfetti: false,\n   }\n\n   private envelopeRef = createRef<HTMLDivElement>()\n   scene: HTMLElement | null = {} as HTMLElement\n   parallaxInstance = createRef()\n\n   componentDidMount = () => {\n      this.scene = document.getElementById('love-scene')\n      this.parallaxInstance = new Parallax(this.scene)\n   }\n\n   getStampsList = () => [\n      <img className=\"love__nori-stamp\" src={gifs.NORI_STAMP} />,\n      <img className=\"love__heart-stamp\" src={images.HEART_STAMP} />,\n   ]\n\n   onHeartButtonClick = () => {\n      const isFocused = this.envelopeRef.current?.getAttribute('data-focused')\n      this.envelopeRef.current?.setAttribute(\n         'data-focused',\n         isFocused == 'false' ? 'true' : 'false',\n      )\n      this.setState({\n         throwConfetti: true,\n      })\n   }\n   render = () => {\n      return (\n         <div className=\"love\">\n            <Confetti throwConfetti={this.state.throwConfetti} />\n            <video\n               className=\"love__background\"\n               muted={true}\n               autoPlay\n               playsInline\n               loop\n               id=\"myVideo\"\n            >\n               <source src={video} type=\"video/webm\" />\n               Sorry, your browser doesn't support embedded videos.\n            </video>\n            <div className=\"love__envelop-container\">\n               <Envelope\n                  ref={this.envelopeRef}\n                  stamps={this.getStampsList()}\n                  message=\"Te Amo\"\n               >\n                  <div className=\"heart\" />\n                  <img\n                     className=\"love__balloons-couple\"\n                     src={gifs.BALLOON_COUPLE}\n                  />\n               </Envelope>\n            </div>\n            <div className=\"love__heart-button\">\n               <Button onPress={this.onHeartButtonClick} />\n            </div>\n            {/* <div className=\"love__nori\" /> */}\n            {/* <div className=\"love__panki\" /> */}\n            <div id=\"love-scene\"></div>\n         </div>\n      )\n   }\n}\n\nexport default Love\n","const initialState: LoveState = {}\n\nconst loveReducer = (state: LoveState = initialState, action: Action) => {\n  if (typeof state === 'undefined') {\n    return initialState\n  }\n  return state\n}\n\nexport default loveReducer\n","import loveReducer from './love'\n\nimport { combineReducers } from 'redux'\n\nexport default combineReducers({\n  loveReducer,\n})\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\nconst middlewares = [thunk]\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst w: any = window\nconst composeEnhancers = w.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport default function configureStore() {\n   const enhancer = composeEnhancers(applyMiddleware(...middlewares))\n   const store = createStore(rootReducer, enhancer)\n\n   if (process.env.NODE_ENV !== 'production' && module.hot) {\n      module.hot.accept('./reducers', () => store.replaceReducer(rootReducer))\n   }\n   return {\n      store,\n   }\n}\n","import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport './App.scss'\nimport Love from './screens/Love'\nimport configureStore from './state/store'\n\nconst { store } = configureStore()\ntype Props = {}\n\nexport default class App extends Component<Props> {\n   render = () => {\n      return (\n         <Provider store={store}>\n            <Router>\n               <Route path=\"/\" component={Love} />\n            </Router>\n         </Provider>\n      )\n   }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n   window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n         /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n      ),\n)\n\ntype Config = {\n   onSuccess?: (registration: ServiceWorkerRegistration) => void\n   onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n      if (publicUrl.origin !== window.location.origin) {\n         // Our service worker won't work if PUBLIC_URL is on a different origin\n         // from what our page is served on. This might happen if a CDN is used to\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n         return\n      }\n\n      window.addEventListener('load', () => {\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n         if (isLocalhost) {\n            // This is running on localhost. Let's check if a service worker still exists or not.\n            checkValidServiceWorker(swUrl, config)\n\n            // Add some additional logging to localhost, pointing developers to the\n            // service worker/PWA documentation.\n            navigator.serviceWorker.ready.then(() => {\n               console.log(\n                  'This web app is being served cache-first by a service ' +\n                     'worker. To learn more, visit https://bit.ly/CRA-PWA',\n               )\n            })\n         } else {\n            // Is not localhost. Just register service worker\n            registerValidSW(swUrl, config)\n         }\n      })\n   }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n   navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n         registration.onupdatefound = () => {\n            const installingWorker = registration.installing\n            if (installingWorker == null) {\n               return\n            }\n            installingWorker.onstatechange = () => {\n               if (installingWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     console.log(\n                        'New content is available and will be used when all ' +\n                           'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                     )\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                        config.onUpdate(registration)\n                     }\n                  } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     console.log('Content is cached for offline use.')\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                        config.onSuccess(registration)\n                     }\n                  }\n               }\n            }\n         }\n      })\n      .catch((error) => {\n         console.error('Error during service worker registration:', error)\n      })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n   // Check if the service worker can be found. If it can't reload the page.\n   fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n   })\n      .then((response) => {\n         // Ensure service worker exists, and that we really are getting a JS file.\n         const contentType = response.headers.get('content-type')\n         if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n         ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then((registration) => {\n               registration.unregister().then(() => {\n                  window.location.reload()\n               })\n            })\n         } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config)\n         }\n      })\n      .catch(() => {\n         console.log(\n            'No internet connection found. App is running in offline mode.',\n         )\n      })\n}\n\nexport function unregister() {\n   if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n         .then((registration) => {\n            registration.unregister()\n         })\n         .catch((error) => {\n            console.error(error.message)\n         })\n   }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst renderApp = () =>\n   ReactDOM.render(\n      <React.StrictMode>\n         <App />\n      </React.StrictMode>,\n      document.getElementById('root'),\n   )\n\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n   module.hot.accept('./App', renderApp)\n}\nrenderApp()\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}